version: '3.8'

services:
  # PostgreSQL Database (RDS in production)
  postgres:
    image: postgres:15-alpine
    container_name: missionsync-db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-document_management}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - missionsync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (ElastiCache in production)
  redis:
    image: redis:7-alpine
    container_name: missionsync-redis
    ports:
      - "6379:6379"
    networks:
      - missionsync-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: missionsync-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-document_management}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: redis://redis:6379
      PORT: 5000
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      # AWS Configuration
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      # OpenRouter API
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
    ports:
      - "5000:5000"
    networks:
      - missionsync-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    restart: unless-stopped

  # Frontend Next.js
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: missionsync-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000}
      NEXT_PUBLIC_GRAPHQL_URL: ${NEXT_PUBLIC_GRAPHQL_URL:-http://localhost:5000/graphql}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:5000}
    ports:
      - "3000:3000"
    networks:
      - missionsync-network
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Load Balancer (ALB in production)
  nginx:
    image: nginx:alpine
    container_name: missionsync-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - missionsync-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

networks:
  missionsync-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local