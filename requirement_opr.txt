Here's the updated prompt including OpenRouter AI integration:

## **AI-Powered Document Feedback Processing System Using OpenRouter**

We need to develop an AI system for an Office of Primary Responsibility (OPR) person who manages document feedback from multiple reviewers. The system will use **OpenRouter AI** for intelligent text processing and enhancement.

### **Input Structure:**
Each feedback contains:
- Line number
- Paragraph number  
- Page number
- Feedback content/comment
- Severity level (Critical, Major, Substantive, Administrative)
- Reviewer identity

### **Feedback Processing Rules:**

**For Non-Critical Feedback** (Major, Substantive, Administrative):
- OPR can **approve** or **reject** each feedback
- If **approved**: OpenRouter AI combines the original sentence with the feedback to create an improved sentence that replaces the original
- If **rejected**: No changes made to the document

**For Critical Feedback:**
- **Mandatory resolution** - OPR must address these issues
- Cannot be rejected without resolution

### **Multi-Reviewer Consolidation:**
When multiple reviewers provide feedback for the same sentence/location:
1. Retrieve all feedback for identical line numbers from database
2. Apply database-stored algorithm to **consolidate multiple feedback items**
3. Present consolidated feedback to OPR for single approve/reject decision
4. If approved, OpenRouter AI processes all consolidated feedback to generate the final improved sentence

### **OpenRouter AI Integration:**
**API Endpoint**: `https://openrouter.ai/api/v1/chat/completions`
**Input**: 
- Original sentence 
- Approved feedback(s)
- Document context (optional)

**Processing**: 
- Use OpenRouter's unified API to access multiple AI models (GPT-4, Claude, Gemini, etc.)
- Model selection based on task complexity and response quality requirements
- Real-time streaming support for immediate feedback

**Output**: Enhanced sentence that incorporates the feedback while maintaining document flow and clarity
**Action**: Replace original sentence with AI-generated improved version

### **OpenRouter Implementation Features:**
- **Model Flexibility**: Access to multiple AI providers through single API
- **Cost Optimization**: Choose appropriate models based on feedback complexity
- **Fallback Models**: Use backup models if primary model fails
- **Real-time Processing**: Stream responses for immediate user feedback
- **Multimodal Support**: Handle text-based document processing efficiently

### **Key Technical Requirements:**
- Feedback aggregation by document location
- Approval/rejection workflow interface
- OpenRouter API integration with authentication
- Critical feedback flagging and mandatory resolution tracking
- Model selection logic based on feedback type and complexity

**OpenRouter Configuration**:
- API Key management
- Model routing (e.g., Claude for critical feedback, GPT-4 for general improvements)
- Error handling and fallback strategies
- Response formatting and validation

Is this system structure with OpenRouter integration clear for implementation?

[1](https://openrouter.ai/docs/faq)
[2](https://openrouter.ai/docs/features/multimodal/overview)
[3](https://relevanceai.com/llm-models/set-up-and-use-openrouter-auto-llm-for-ai-applications)
[4](https://www.youtube.com/watch?v=WG7rueGcR4E)
[5](https://www.reddit.com/r/FlowLauncher/comments/1j7pv9j/ai_a_plugin_for_querying_llms_via_the_openrouter/)
[6](https://www.optimizesmart.com/what-is-openrouter-api-and-how-to-use-it/)
[7](https://openrouter.ai/models)
[8](https://www.reddit.com/r/LLMDevs/comments/1in9g1n/openrouter_experience/)
