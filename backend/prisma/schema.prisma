// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and Authentication
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String?  @unique
  firstName         String
  lastName          String
  passwordHash      String
  avatar            String?
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  lastLogin         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Multi-factor authentication
  mfaEnabled        Boolean  @default(false)
  mfaSecret         String?
  backupCodes       String[]

  // Profile information
  department        String?
  jobTitle          String?
  phone             String?
  timezone          String   @default("UTC")
  language          String   @default("en")

  // Relationships
  role              Role     @relation(fields: [roleId], references: [id])
  roleId            String
  organization      Organization @relation(fields: [organizationId], references: [id])
  organizationId    String
  
  // Document relationships
  createdDocuments  Document[] @relation("DocumentCreator")
  modifiedDocuments DocumentVersion[] @relation("DocumentModifier")
  documentPermissions DocumentPermission[]
  folderPermissions FolderPermission[]
  
  // Activity and audit
  auditLogs         AuditLog[]
  sessions          UserSession[]
  
  // Workflow relationships
  assignedTasks     WorkflowTask[] @relation("TaskAssignee")
  createdTasks      WorkflowTask[] @relation("TaskCreator")
  comments          Comment[]

  // Publishing relationships
  approvalStepUsers ApprovalStepUser[] @relation("ApprovalStepUsers")
  publishingSubmissions DocumentPublishing[] @relation("PublishingSubmitter")
  publishingPublications DocumentPublishing[] @relation("PublishingPublisher")
  documentApprovals DocumentApproval[] @relation("DocumentApprover")
  approvalDelegations DocumentApproval[] @relation("ApprovalDelegator")
  notifications     PublishingNotification[] @relation("NotificationRecipient")
  distributionInitiations DocumentDistribution[] @relation("DistributionInitiator")

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  domain      String   @unique
  settings    Json     @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users       User[]
  roles       Role[]
  documents   Document[]
  folders     Folder[]
  workflows   Workflow[]
  publishingWorkflows PublishingWorkflow[]
  publishingTemplates PublishingTemplate[]

  @@map("organizations")
}

model Role {
  id           String   @id @default(cuid())
  name         String
  description  String?
  permissions  String[] // Array of permission strings
  isSystem     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  users        User[]

  @@unique([name, organizationId])
  @@map("roles")
}

model UserSession {
  id          String   @id @default(cuid())
  sessionId   String   @unique
  userId      String
  ipAddress   String
  userAgent   String
  isActive    Boolean  @default(true)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Document Management
model Document {
  id              String   @id @default(cuid())
  title           String
  description     String?
  fileName        String
  originalName    String
  mimeType        String
  fileSize        Int
  checksum        String   @unique
  
  // Storage information
  storagePath     String
  storageProvider String   @default("minio") // minio, s3, etc.
  
  // Document metadata
  status          DocumentStatus @default(DRAFT)
  category        String?
  tags            String[]
  customFields    Json     @default("{}")
  
  // QR Code and identifiers
  qrCode          String?
  documentNumber  String?  @unique
  
  // Relationships
  createdBy       User     @relation("DocumentCreator", fields: [createdById], references: [id])
  createdById     String
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  folder          Folder?  @relation(fields: [folderId], references: [id])
  folderId        String?
  
  // Document hierarchy
  parentDocument  Document? @relation("DocumentHierarchy", fields: [parentDocumentId], references: [id])
  parentDocumentId String?
  childDocuments  Document[] @relation("DocumentHierarchy")
  
  // Versioning
  currentVersion  Int      @default(1)
  versions        DocumentVersion[]
  
  // Access control
  permissions     DocumentPermission[]
  
  // Workflow and collaboration
  workflows       DocumentWorkflow[]
  comments        Comment[]
  
  // Publishing relationships
  publishing      DocumentPublishing[] @relation("DocumentPublishing")
  
  // AI and processing
  ocrProcessed    Boolean  @default(false)
  ocrText         String?
  aiClassification String?
  aiTags          String[]
  aiConfidence    Float?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastAccessedAt  DateTime?

  @@map("documents")
}

model DocumentVersion {
  id              String   @id @default(cuid())
  versionNumber   Int
  title           String
  description     String?
  fileName        String
  fileSize        Int
  checksum        String
  storagePath     String
  
  // Change information
  changeType      VersionChangeType @default(MINOR)
  changeNotes     String?
  
  // Binary diff information
  diffPath        String?  // Path to binary diff file
  diffSize        Int?     // Size of diff file in bytes
  compressionRatio Float?  // How much space saved (0-1)
  patchAlgorithm  String?  // Algorithm used (bsdiff, xdelta, etc.)
  
  // Change analysis
  bytesChanged    Int?     // Total bytes modified
  percentChanged  Float?   // Percentage of file changed
  changeCategory  String?  // MINOR, MAJOR, STRUCTURAL
  similarity      Float?   // Similarity to previous version (0-100)
  
  // Relationships
  document        Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId      String
  createdBy       User     @relation("DocumentModifier", fields: [createdById], references: [id])
  createdById     String
  
  // Timestamps
  createdAt       DateTime @default(now())

  @@unique([documentId, versionNumber])
  @@map("document_versions")
}

model Folder {
  id              String   @id @default(cuid())
  name            String
  description     String?
  color           String?
  icon            String?
  
  // Hierarchy
  parentFolder    Folder?  @relation("FolderHierarchy", fields: [parentFolderId], references: [id])
  parentFolderId  String?
  subFolders      Folder[] @relation("FolderHierarchy")
  
  // Path for efficient queries
  fullPath        String
  depth           Int      @default(0)
  
  // Relationships
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  documents       Document[]
  permissions     FolderPermission[]
  
  // Metadata
  customFields    Json     @default("{}")
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([name, parentFolderId, organizationId])
  @@map("folders")
}

// Permissions and Access Control
model DocumentPermission {
  id          String   @id @default(cuid())
  permission  PermissionType
  
  // Relationships
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  // Grant information
  grantedAt   DateTime @default(now())
  expiresAt   DateTime?

  @@unique([documentId, userId])
  @@map("document_permissions")
}

model FolderPermission {
  id          String   @id @default(cuid())
  permission  PermissionType
  
  // Relationships
  folder      Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  // Grant information
  grantedAt   DateTime @default(now())
  expiresAt   DateTime?

  @@unique([folderId, userId])
  @@map("folder_permissions")
}

// Workflow Management
model Workflow {
  id              String   @id @default(cuid())
  name            String
  description     String?
  definition      Json     // Workflow definition in JSON format
  isActive        Boolean  @default(true)
  
  // Relationships
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  
  // Document workflows
  documentWorkflows DocumentWorkflow[]
  tasks           WorkflowTask[]
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("workflows")
}

model DocumentWorkflow {
  id              String   @id @default(cuid())
  status          WorkflowStatus @default(PENDING)
  currentStep     Int      @default(1)
  totalSteps      Int
  
  // Relationships
  document        Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId      String
  workflow        Workflow @relation(fields: [workflowId], references: [id])
  workflowId      String
  
  // Timestamps
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  updatedAt       DateTime @updatedAt

  @@map("document_workflows")
}

model WorkflowTask {
  id              String   @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus @default(PENDING)
  priority        TaskPriority @default(MEDIUM)
  stepNumber      Int
  
  // Task data
  formData        Json     @default("{}")
  
  // Relationships
  workflow        Workflow @relation(fields: [workflowId], references: [id])
  workflowId      String
  assignedTo      User     @relation("TaskAssignee", fields: [assignedToId], references: [id])
  assignedToId    String
  createdBy       User     @relation("TaskCreator", fields: [createdById], references: [id])
  createdById     String
  
  // Timestamps
  dueDate         DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  completedAt     DateTime?

  @@map("workflow_tasks")
}

// Comments and Collaboration
model Comment {
  id          String   @id @default(cuid())
  content     String
  isResolved  Boolean  @default(false)
  
  // Position in document (for annotations)
  pageNumber  Int?
  positionX   Float?
  positionY   Float?
  
  // Relationships
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  
  // Threading
  parentComment Comment? @relation("CommentThread", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies     Comment[] @relation("CommentThread")
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("comments")
}

// Audit and Logging
model AuditLog {
  id          String   @id @default(cuid())
  action      String   // CREATE, UPDATE, DELETE, VIEW, DOWNLOAD, etc.
  resource    String   // DOCUMENT, FOLDER, USER, etc.
  resourceId  String
  oldValues   Json?
  newValues   Json?
  ipAddress   String
  userAgent   String
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  
  // Timestamps
  createdAt   DateTime @default(now())

  @@index([resource, resourceId])
  @@index([userId, createdAt])
  @@map("audit_logs")
}

// Search and Indexing
model SearchIndex {
  id          String   @id @default(cuid())
  documentId  String   @unique
  content     String   // Full-text content for search
  metadata    Json     // Searchable metadata
  lastIndexed DateTime @default(now())

  @@map("search_index")
}

// System Configuration
model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isEncrypted Boolean  @default(false)
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

// Enums
enum DocumentStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
  DELETED
}

enum VersionChangeType {
  MAJOR
  MINOR
  PATCH
}

enum PermissionType {
  READ
  WRITE
  DELETE
  SHARE
  ADMIN
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Publishing System Models
model PublishingWorkflow {
  id                String   @id @default(cuid())
  name              String
  description       String?
  workflowType      PublishingWorkflowType @default(DOCUMENT_APPROVAL)
  isActive          Boolean  @default(true)
  autoApprove       Boolean  @default(false)
  
  // Workflow configuration
  approvalSteps     ApprovalStep[]
  requiredApprovers Int      @default(1)
  allowParallel     Boolean  @default(false)
  timeoutHours      Int      @default(72)
  
  // Template and formatting
  publishingTemplate PublishingTemplate? @relation(fields: [templateId], references: [id])
  templateId        String?
  
  // Relationships
  organization      Organization @relation(fields: [organizationId], references: [id])
  organizationId    String
  documents         DocumentPublishing[]
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("publishing_workflows")
}

model ApprovalStep {
  id                String   @id @default(cuid())
  stepNumber        Int
  stepName          String
  description       String?
  isRequired        Boolean  @default(true)
  canSkip           Boolean  @default(false)
  timeoutHours      Int      @default(24)
  
  // Approval requirements
  requiredRole      String?  // Role name required for this step
  requiredUsers     ApprovalStepUser[]
  minApprovals      Int      @default(1)
  allowDelegation   Boolean  @default(true)
  
  // Relationships
  workflow          PublishingWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId        String
  approvals         DocumentApproval[]
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([workflowId, stepNumber])
  @@map("approval_steps")
}

model ApprovalStepUser {
  id            String   @id @default(cuid())
  
  // Relationships
  approvalStep  ApprovalStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId        String
  user          User     @relation("ApprovalStepUsers", fields: [userId], references: [id])
  userId        String
  
  // Approval authority
  canApprove    Boolean  @default(true)
  canReject     Boolean  @default(true)
  canDelegate   Boolean  @default(false)
  
  // Timestamps
  createdAt     DateTime @default(now())

  @@unique([stepId, userId])
  @@map("approval_step_users")
}

model DocumentPublishing {
  id                String   @id @default(cuid())
  
  // Document and workflow
  document          Document @relation("DocumentPublishing", fields: [documentId], references: [id], onDelete: Cascade)
  documentId        String
  workflow          PublishingWorkflow @relation(fields: [workflowId], references: [id])
  workflowId        String
  
  // Publishing details
  publishingStatus  PublishingStatus @default(PENDING_APPROVAL)
  currentStep       Int      @default(1)
  totalSteps        Int
  
  // Scheduling
  scheduledPublishAt DateTime?
  publishedAt       DateTime?
  expiresAt         DateTime?
  
  // Publishing destinations
  destinations      PublishingDestination[]
  
  // Metadata
  publishingNotes   String?
  urgencyLevel      PublishingUrgency @default(NORMAL)
  isEmergencyPublish Boolean @default(false)
  
  // Tracking
  submittedBy       User     @relation("PublishingSubmitter", fields: [submittedById], references: [id])
  submittedById     String
  publishedBy       User?    @relation("PublishingPublisher", fields: [publishedById], references: [id])
  publishedById     String?
  
  // Related records
  approvals         DocumentApproval[]
  notifications     PublishingNotification[]
  distributions     DocumentDistribution[]
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("document_publishing")
}

model DocumentApproval {
  id                String   @id @default(cuid())
  
  // Approval details
  status            ApprovalStatus @default(PENDING)
  decision          ApprovalDecision?
  comments          String?
  conditions        String?  // Conditional approval requirements
  
  // Approval step context
  approvalStep      ApprovalStep @relation(fields: [stepId], references: [id])
  stepId            String
  documentPublishing DocumentPublishing @relation(fields: [publishingId], references: [id], onDelete: Cascade)
  publishingId      String
  
  // Approver information
  approver          User     @relation("DocumentApprover", fields: [approverId], references: [id])
  approverId        String
  delegatedFrom     User?    @relation("ApprovalDelegator", fields: [delegatedFromId], references: [id])
  delegatedFromId   String?
  
  // Timing
  dueDate           DateTime?
  respondedAt       DateTime?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([publishingId, stepId, approverId])
  @@map("document_approvals")
}

model PublishingTemplate {
  id                String   @id @default(cuid())
  name              String
  description       String?
  templateType      TemplateType @default(STANDARD)
  
  // Template configuration
  formatting        Json     @default("{}")  // CSS/formatting rules
  layout            Json     @default("{}")  // Layout configuration
  metadata          Json     @default("{}")  // Default metadata
  
  // Content rules
  requiresCoverPage Boolean  @default(false)
  requiresApprovalPage Boolean @default(false)
  includeQRCode     Boolean  @default(true)
  includeWatermark  Boolean  @default(false)
  watermarkText     String?
  
  // Relationships
  organization      Organization @relation(fields: [organizationId], references: [id])
  organizationId    String
  workflows         PublishingWorkflow[]
  
  // Usage tracking
  isActive          Boolean  @default(true)
  usageCount        Int      @default(0)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("publishing_templates")
}

model PublishingDestination {
  id                String   @id @default(cuid())
  
  // Destination details
  destinationType   DestinationType
  destinationName   String
  destinationConfig Json     @default("{}")  // Destination-specific config
  
  // Publishing context
  documentPublishing DocumentPublishing @relation(fields: [publishingId], references: [id], onDelete: Cascade)
  publishingId      String
  
  // Status tracking
  status            DestinationStatus @default(PENDING)
  publishedAt       DateTime?
  publishedUrl      String?
  errorMessage      String?
  retryCount        Int      @default(0)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("publishing_destinations")
}

model PublishingNotification {
  id                String   @id @default(cuid())
  
  // Notification details
  notificationType  NotificationType
  title             String
  message           String
  isRead            Boolean  @default(false)
  
  // Delivery method
  deliveryMethod    DeliveryMethod @default(IN_APP)
  emailSent         Boolean  @default(false)
  smsSent           Boolean   @default(false)
  
  // Relationships
  documentPublishing DocumentPublishing @relation(fields: [publishingId], references: [id], onDelete: Cascade)
  publishingId      String
  recipient         User     @relation("NotificationRecipient", fields: [recipientId], references: [id])
  recipientId       String
  
  // Timestamps
  sentAt            DateTime?
  readAt            DateTime?
  createdAt         DateTime @default(now())

  @@map("publishing_notifications")
}

model DocumentDistribution {
  id                String   @id @default(cuid())
  
  // Distribution details
  distributionMethod DistributionMethod
  recipientType     RecipientType
  recipientList     Json     @default("[]")  // Array of recipient info
  
  // Content details
  distributionFormat String  @default("PDF")
  includeAttachments Boolean @default(true)
  personalizedMessage String?
  
  // Relationships
  documentPublishing DocumentPublishing @relation(fields: [publishingId], references: [id], onDelete: Cascade)
  publishingId      String
  initiatedBy       User     @relation("DistributionInitiator", fields: [initiatedById], references: [id])
  initiatedById     String
  
  // Status tracking
  status            DistributionStatus @default(PENDING)
  distributedAt     DateTime?
  deliveryStats     Json     @default("{}")  // Delivery statistics
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("document_distributions")
}

// Publishing Enums
enum PublishingWorkflowType {
  DOCUMENT_APPROVAL
  EMERGENCY_PUBLISH
  SCHEDULED_PUBLISH
  COLLABORATIVE_REVIEW
  COMPLIANCE_REVIEW
}

enum PublishingStatus {
  PENDING_APPROVAL
  IN_APPROVAL
  APPROVED
  REJECTED
  PUBLISHED
  EXPIRED
  CANCELLED
}

enum ApprovalStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  EXPIRED
  DELEGATED
}

enum ApprovalDecision {
  APPROVE
  REJECT
  APPROVE_WITH_CONDITIONS
  REQUEST_CHANGES
}

enum PublishingUrgency {
  LOW
  NORMAL
  HIGH
  URGENT
  EMERGENCY
}

enum TemplateType {
  STANDARD
  EXECUTIVE
  TECHNICAL
  MARKETING
  LEGAL
  COMPLIANCE
}

enum DestinationType {
  WEB_PORTAL
  EMAIL_DISTRIBUTION
  PRINT_QUEUE
  EXTERNAL_API
  FILE_SHARE
  SOCIAL_MEDIA
}

enum DestinationStatus {
  PENDING
  PUBLISHING
  PUBLISHED
  FAILED
  RETRYING
}

enum NotificationType {
  APPROVAL_REQUEST
  APPROVAL_RECEIVED
  REJECTION_RECEIVED
  PUBLICATION_SUCCESS
  PUBLICATION_FAILED
  DEADLINE_APPROACHING
  WORKFLOW_COMPLETED
}

enum DeliveryMethod {
  IN_APP
  EMAIL
  SMS
  PUSH_NOTIFICATION
}

enum DistributionMethod {
  EMAIL
  SECURE_LINK
  DIRECT_DOWNLOAD
  API_PUSH
  PRINT_DISTRIBUTION
}

enum RecipientType {
  INDIVIDUAL_USERS
  USER_GROUPS
  EXTERNAL_CONTACTS
  PUBLIC_DISTRIBUTION
  DEPARTMENT_WIDE
}

enum DistributionStatus {
  PENDING
  PROCESSING
  COMPLETED
  PARTIALLY_FAILED
  FAILED
}